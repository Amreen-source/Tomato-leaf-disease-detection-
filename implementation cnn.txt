{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ebe3f30a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2023-08-28T04:42:29.930544Z",
     "iopub.status.busy": "2023-08-28T04:42:29.930090Z",
     "iopub.status.idle": "2023-08-28T04:42:40.443600Z",
     "shell.execute_reply": "2023-08-28T04:42:40.442519Z"
    },
    "papermill": {
     "duration": 10.532233,
     "end_time": "2023-08-28T04:42:40.446596",
     "exception": false,
     "start_time": "2023-08-28T04:42:29.914363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n",
      "  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n",
      "/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/__init__.py:98: UserWarning: unable to load libtensorflow_io_plugins.so: unable to open file: libtensorflow_io_plugins.so, from paths: ['/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/libtensorflow_io_plugins.so']\n",
      "caused by: ['/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/libtensorflow_io_plugins.so: undefined symbol: _ZN3tsl6StatusC1EN10tensorflow5error4CodeESt17basic_string_viewIcSt11char_traitsIcEENS_14SourceLocationE']\n",
      "  warnings.warn(f\"unable to load libtensorflow_io_plugins.so: {e}\")\n",
      "/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/__init__.py:104: UserWarning: file system plugins are not loaded: unable to open file: libtensorflow_io.so, from paths: ['/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/libtensorflow_io.so']\n",
      "caused by: ['/opt/conda/lib/python3.10/site-packages/tensorflow_io/python/ops/libtensorflow_io.so: undefined symbol: _ZTVN10tensorflow13GcsFileSystemE']\n",
      "  warnings.warn(f\"file system plugins are not loaded: {e}\")\n"
     ]
    }
   ],
   "source": [
    "# Importing all the libraries needed\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import tensorflow as tf\n",
    "import pandas as pd\n",
    "import os, requests, cv2, random\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from tensorflow.keras import models\n",
    "from tensorflow.keras import Sequential, layers\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "from tensorflow import keras\n",
    "from sklearn.metrics import confusion_matrix,classification_report"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e99b257a",
   "metadata": {
    "papermill": {
     "duration": 0.007505,
     "end_time": "2023-08-28T04:42:40.462924",
     "exception": false,
     "start_time": "2023-08-28T04:42:40.455419",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Loading data and preprocessing it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7a4b1f6a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T04:42:40.479715Z",
     "iopub.status.busy": "2023-08-28T04:42:40.479125Z",
     "iopub.status.idle": "2023-08-28T04:42:40.483935Z",
     "shell.execute_reply": "2023-08-28T04:42:40.482810Z"
    },
    "papermill": {
     "duration": 0.015123,
     "end_time": "2023-08-28T04:42:40.485931",
     "exception": false,
     "start_time": "2023-08-28T04:42:40.470808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# loading the pictures of tomatoes\n",
    "\n",
    "train_data_dir = '../input/tomatoleaf/tomato/train'\n",
    "test_data_dir = '../input/tomatoleaf/tomato/val' #this folder will be used for evaluating model's perfomance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9e4ebc4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T04:42:40.501141Z",
     "iopub.status.busy": "2023-08-28T04:42:40.500871Z",
     "iopub.status.idle": "2023-08-28T04:42:40.506350Z",
     "shell.execute_reply": "2023-08-28T04:42:40.505375Z"
    },
    "papermill": {
     "duration": 0.015575,
     "end_time": "2023-08-28T04:42:40.508440",
     "exception": false,
     "start_time": "2023-08-28T04:42:40.492865",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# for this challenge we are using ImageDataGenerator \n",
    "\n",
    "train_datagen = ImageDataGenerator(rescale=1/255.0,\n",
    "                               shear_range=0.2,\n",
    "                                zoom_range=0.2,\n",
    "                                horizontal_flip=True,\n",
    "                                validation_split=0.3)# specifying the validation split inside the function\n",
    "\n",
    "test_datagen = ImageDataGenerator(rescale=1/255.0,\n",
    "                                shear_range=0.2,\n",
    "                                zoom_range=0.2,\n",
    "                                horizontal_flip=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fa8db427",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T04:42:40.525143Z",
     "iopub.status.busy": "2023-08-28T04:42:40.524372Z",
     "iopub.status.idle": "2023-08-28T04:42:44.686826Z",
     "shell.execute_reply": "2023-08-28T04:42:44.685920Z"
    },
    "papermill": {
     "duration": 4.17316,
     "end_time": "2023-08-28T04:42:44.689159",
     "exception": false,
     "start_time": "2023-08-28T04:42:40.515999",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 7000 images belonging to 10 classes.\n"
     ]
    }
   ],
   "source": [
    "train_gen = train_datagen.flow_from_directory(\n",
    "                                train_data_dir,\n",
    "                                target_size=(224, 224),\n",
    "                                batch_size=32,\n",
    "                                shuffle=True,\n",
    "                                class_mode='categorical',\n",
    "                                subset='training')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0e155e31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T04:42:44.707006Z",
     "iopub.status.busy": "2023-08-28T04:42:44.705517Z",
     "iopub.status.idle": "2023-08-28T04:42:45.820953Z",
     "shell.execute_reply": "2023-08-28T04:42:45.819949Z"
    },
    "papermill": {
     "duration": 1.127126,
     "end_time": "2023-08-28T04:42:45.823790",
     "exception": false,
     "start_time": "2023-08-28T04:42:44.696664",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 3000 images belonging to 10 classes.\n"
     ]
    }
   ],
   "source": [
    "val_gen = train_datagen.flow_from_directory(\n",
    "                                train_data_dir,\n",
    "                                target_size=(224,224),\n",
    "                                batch_size=32,\n",
    "                                shuffle=True,\n",
    "                                class_mode='categorical',\n",
    "                                subset='validation')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ea611967",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T04:42:45.841780Z",
     "iopub.status.busy": "2023-08-28T04:42:45.841449Z",
     "iopub.status.idle": "2023-08-28T04:42:45.967100Z",
     "shell.execute_reply": "2023-08-28T04:42:45.966193Z"
    },
    "papermill": {
     "duration": 0.137148,
     "end_time": "2023-08-28T04:42:45.969147",
     "exception": false,
     "start_time": "2023-08-28T04:42:45.831999",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 1000 images belonging to 10 classes.\n"
     ]
    }
   ],
   "source": [
    "test_gen = test_datagen.flow_from_directory(\n",
    "        test_data_dir,\n",
    "        target_size=(224, 224),\n",
    "        batch_size=32,\n",
    "        class_mode='categorical',\n",
    "        shuffle = False) #shuffle will not affect the accuracy of the model, but will affect the computation of some metrics that depend on the order of the samples"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8486abeb",
   "metadata": {
    "papermill": {
     "duration": 0.007393,
     "end_time": "2023-08-28T04:42:45.984030",
     "exception": false,
     "start_time": "2023-08-28T04:42:45.976637",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1a. Building a CNN model with a learning rate of 0.001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d319f229",
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras import Sequential\n",
    "from keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, BatchNormalization, Activation, Dropout\n",
    "from keras import backend\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "\n",
    "# Creating advanced model\n",
    "def advanced_model():\n",
    "    # Clearing any model memory\n",
    "    backend.clear_session()\n",
    "\n",
    "    # Creating Sequential model\n",
    "    model = Sequential()\n",
    "\n",
    "    # Adding convolution layers\n",
    "    model.add(Conv2D(32, (3,3), kernel_initializer='he_uniform', input_shape=(*DIMENSIONS, 3)))\n",
    "    model.add(BatchNormalization())\n",
    "    model.add(Activation('relu'))\n",
    "    model.add(MaxPooling2D(2, 2))\n",
    "\n",
    "    model.add(Conv2D(64, (3,3), kernel_initializer='he_uniform'))\n",
    "    model.add(BatchNormalization())\n",
    "    model.add(Activation('relu'))\n",
    "    model.add(Conv2D(64, (3,3), kernel_initializer='he_uniform'))\n",
    "    model.add(BatchNormalization())\n",
    "    model.add(Activation('relu'))\n",
    "    model.add(MaxPooling2D(2, 2))\n",
    "\n",
    "    model.add(Conv2D(128, (3,3), kernel_initializer='he_uniform'))\n",
    "    model.add(BatchNormalization())\n",
    "    model.add(Activation('relu'))\n",
    "    model.add(Conv2D(128, (3,3), kernel_initializer='he_uniform'))\n",
    "    model.add(BatchNormalization())\n",
    "    model.add(Activation('relu'))\n",
    "    model.add(Conv2D(128, (3,3), kernel_initializer='he_uniform'))\n",
    "    model.add(BatchNormalization())\n",
    "    model.add(Activation('relu'))\n",
    "    model.add(MaxPooling2D(2, 2))\n",
    "\n",
    "    # Additional convolutional layers\n",
    "    model.add(Conv2D(256, (3,3), kernel_initializer='he_uniform'))\n",
    "    model.add(BatchNormalization())\n",
    "    model.add(Activation('relu'))\n",
    "    model.add(Conv2D(256, (3,3), kernel_initializer='he_uniform'))\n",
    "    model.add(BatchNormalization())\n",
    "    model.add(Activation('relu'))\n",
    "    model.add(MaxPooling2D(2, 2))\n",
    "\n",
    "    # Flattening the output and adding Dense layers\n",
    "    model.add(Flatten())\n",
    "    model.add(Dense(512))\n",
    "    model.add(Activation('relu'))\n",
    "    model.add(Dropout(0.5))\n",
    "    model.add(Dense(256))\n",
    "    model.add(Activation('relu'))\n",
    "    model.add(Dropout(0.5))\n",
    "    model.add(Dense(1, activation='sigmoid'))\n",
    "    model.summary()\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d1fe1efb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T04:42:46.000647Z",
     "iopub.status.busy": "2023-08-28T04:42:45.999938Z",
     "iopub.status.idle": "2023-08-28T04:42:51.009108Z",
     "shell.execute_reply": "2023-08-28T04:42:51.008104Z"
    },
    "papermill": {
     "duration": 5.020356,
     "end_time": "2023-08-28T04:42:51.011608",
     "exception": false,
     "start_time": "2023-08-28T04:42:45.991252",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# CNN model layers\n",
    "\n",
    "cnn = models.Sequential()\n",
    "\n",
    "cnn.add(layers.Conv2D (32, kernel_size = (3,3), activation='relu', input_shape = [224, 224,3])),\n",
    "cnn.add(layers.MaxPooling2D(pool_size = (2, 2))),\n",
    "\n",
    "cnn.add(layers.Conv2D(64, (3,3), activation='relu')),\n",
    "cnn.add(layers. MaxPooling2D((2, 2))),\n",
    "\n",
    "cnn.add(layers.Conv2D (64, (3,3), activation='relu')),\n",
    "cnn.add(layers.MaxPooling2D((2, 2))),\n",
    "\n",
    "cnn.add(layers.Conv2D(64, (3, 3), activation='relu')), \n",
    "cnn.add(layers.MaxPooling2D((2, 2))),\n",
    "\n",
    "cnn.add(layers. Conv2D (64, (3, 3), activation='relu')), \n",
    "cnn.add(layers.MaxPooling2D((2, 2))),\n",
    "\n",
    "cnn.add(layers.Conv2D(64, (3, 3), activation='relu')), \n",
    "cnn.add(layers.MaxPooling2D((2, 2))),\n",
    "\n",
    "cnn.add(layers.Flatten()),\n",
    "\n",
    "cnn.add(layers.Dense(64,activation='relu'))\n",
    "#output layer\n",
    "cnn.add(layers.Dense(10,activation='softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cae821ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T04:42:51.031826Z",
     "iopub.status.busy": "2023-08-28T04:42:51.029840Z",
     "iopub.status.idle": "2023-08-28T04:42:51.079207Z",
     "shell.execute_reply": "2023-08-28T04:42:51.078316Z"
    },
    "papermill": {
     "duration": 0.084845,
     "end_time": "2023-08-28T04:42:51.105526",
     "exception": false,
     "start_time": "2023-08-28T04:42:51.020681",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d (Conv2D)             (None, 222, 222, 32)      896       \n",
      "                                                                 \n",
      " max_pooling2d (MaxPooling2D  (None, 111, 111, 32)     0         \n",
      " )                                                               \n",
      "                                                                 \n",
      " conv2d_1 (Conv2D)           (None, 109, 109, 64)      18496     \n",
      "                                                                 \n",
      " max_pooling2d_1 (MaxPooling  (None, 54, 54, 64)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " conv2d_2 (Conv2D)           (None, 52, 52, 64)        36928     \n",
      "                                                                 \n",
      " max_pooling2d_2 (MaxPooling  (None, 26, 26, 64)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " conv2d_3 (Conv2D)           (None, 24, 24, 64)        36928     \n",
      "                                                                 \n",
      " max_pooling2d_3 (MaxPooling  (None, 12, 12, 64)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " conv2d_4 (Conv2D)           (None, 10, 10, 64)        36928     \n",
      "                                                                 \n",
      " max_pooling2d_4 (MaxPooling  (None, 5, 5, 64)         0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " conv2d_5 (Conv2D)           (None, 3, 3, 64)          36928     \n",
      "                                                                 \n",
      " max_pooling2d_5 (MaxPooling  (None, 1, 1, 64)         0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 64)                0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 64)                4160      \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 10)                650       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 171,914\n",
      "Trainable params: 171,914\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "cnn.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "331a9c09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T04:42:51.130102Z",
     "iopub.status.busy": "2023-08-28T04:42:51.129821Z",
     "iopub.status.idle": "2023-08-28T04:42:51.138279Z",
     "shell.execute_reply": "2023-08-28T04:42:51.137351Z"
    },
    "papermill": {
     "duration": 0.02319,
     "end_time": "2023-08-28T04:42:51.140680",
     "exception": false,
     "start_time": "2023-08-28T04:42:51.117490",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "opt = keras.optimizers.Adam(learning_rate=0.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a327a569",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T04:42:51.163904Z",
     "iopub.status.busy": "2023-08-28T04:42:51.163607Z",
     "iopub.status.idle": "2023-08-28T04:42:51.177331Z",
     "shell.execute_reply": "2023-08-28T04:42:51.176387Z"
    },
    "papermill": {
     "duration": 0.027582,
     "end_time": "2023-08-28T04:42:51.179341",
     "exception": false,
     "start_time": "2023-08-28T04:42:51.151759",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "cnn.compile(optimizer=opt,loss='categorical_crossentropy',metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "265f09a0",
   "metadata": {
    "papermill": {
     "duration": 0.010929,
     "end_time": "2023-08-28T04:42:51.201347",
     "exception": false,
     "start_time": "2023-08-28T04:42:51.190418",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Before training the model, let's define an Early Stopping to avoid oferfitting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "51f5ef3d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T04:42:51.225547Z",
     "iopub.status.busy": "2023-08-28T04:42:51.224740Z",
     "iopub.status.idle": "2023-08-28T04:42:51.229403Z",
     "shell.execute_reply": "2023-08-28T04:42:51.228421Z"
    },
    "papermill": {
     "duration": 0.018581,
     "end_time": "2023-08-28T04:42:51.231459",
     "exception": false,
     "start_time": "2023-08-28T04:42:51.212878",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "es = EarlyStopping(monitor = 'val_accuracy', \n",
    "                   mode = 'max', \n",
    "                   patience = 20, \n",
    "                   verbose = 1, \n",
    "                   restore_best_weights = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "55b61427",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T04:42:51.256176Z",
     "iopub.status.busy": "2023-08-28T04:42:51.255395Z",
     "iopub.status.idle": "2023-08-28T07:45:58.958817Z",
     "shell.execute_reply": "2023-08-28T07:45:58.957817Z"
    },
    "papermill": {
     "duration": 10989.478666,
     "end_time": "2023-08-28T07:46:00.721366",
     "exception": false,
     "start_time": "2023-08-28T04:42:51.242700",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "218/218 [==============================] - 176s 746ms/step - loss: 2.0856 - accuracy: 0.2204 - val_loss: 1.8346 - val_accuracy: 0.3530\n",
      "Epoch 2/100\n",
      "218/218 [==============================] - 123s 565ms/step - loss: 1.4358 - accuracy: 0.4799 - val_loss: 1.1780 - val_accuracy: 0.5580\n",
      "Epoch 3/100\n",
      "218/218 [==============================] - 121s 555ms/step - loss: 0.9778 - accuracy: 0.6533 - val_loss: 0.8191 - val_accuracy: 0.7010\n",
      "Epoch 4/100\n",
      "218/218 [==============================] - 123s 563ms/step - loss: 0.7932 - accuracy: 0.7131 - val_loss: 0.7373 - val_accuracy: 0.7430\n",
      "Epoch 5/100\n",
      "218/218 [==============================] - 128s 584ms/step - loss: 0.6492 - accuracy: 0.7730 - val_loss: 0.6257 - val_accuracy: 0.7810\n",
      "Epoch 6/100\n",
      "218/218 [==============================] - 130s 595ms/step - loss: 0.5581 - accuracy: 0.8036 - val_loss: 0.4771 - val_accuracy: 0.8337\n",
      "Epoch 7/100\n",
      "218/218 [==============================] - 129s 588ms/step - loss: 0.5062 - accuracy: 0.8197 - val_loss: 0.4214 - val_accuracy: 0.8517\n",
      "Epoch 8/100\n",
      "218/218 [==============================] - 133s 609ms/step - loss: 0.4671 - accuracy: 0.8334 - val_loss: 0.4609 - val_accuracy: 0.8407\n",
      "Epoch 9/100\n",
      "218/218 [==============================] - 128s 584ms/step - loss: 0.4103 - accuracy: 0.8563 - val_loss: 0.4269 - val_accuracy: 0.8483\n",
      "Epoch 10/100\n",
      "218/218 [==============================] - 122s 556ms/step - loss: 0.3771 - accuracy: 0.8656 - val_loss: 0.3616 - val_accuracy: 0.8763\n",
      "Epoch 11/100\n",
      "218/218 [==============================] - 121s 552ms/step - loss: 0.3572 - accuracy: 0.8743 - val_loss: 0.3861 - val_accuracy: 0.8653\n",
      "Epoch 12/100\n",
      "218/218 [==============================] - 122s 559ms/step - loss: 0.2989 - accuracy: 0.8917 - val_loss: 0.2867 - val_accuracy: 0.8970\n",
      "Epoch 13/100\n",
      "218/218 [==============================] - 121s 554ms/step - loss: 0.2891 - accuracy: 0.8934 - val_loss: 0.3224 - val_accuracy: 0.8907\n",
      "Epoch 14/100\n",
      "218/218 [==============================] - 122s 556ms/step - loss: 0.2715 - accuracy: 0.9007 - val_loss: 0.3627 - val_accuracy: 0.8787\n",
      "Epoch 15/100\n",
      "218/218 [==============================] - 123s 561ms/step - loss: 0.2473 - accuracy: 0.9114 - val_loss: 0.3340 - val_accuracy: 0.8800\n",
      "Epoch 16/100\n",
      "218/218 [==============================] - 124s 568ms/step - loss: 0.2513 - accuracy: 0.9104 - val_loss: 0.3271 - val_accuracy: 0.8847\n",
      "Epoch 17/100\n",
      "218/218 [==============================] - 121s 554ms/step - loss: 0.2193 - accuracy: 0.9217 - val_loss: 0.2690 - val_accuracy: 0.9090\n",
      "Epoch 18/100\n",
      "218/218 [==============================] - 124s 566ms/step - loss: 0.2279 - accuracy: 0.9200 - val_loss: 0.2934 - val_accuracy: 0.8983\n",
      "Epoch 19/100\n",
      "218/218 [==============================] - 122s 557ms/step - loss: 0.2060 - accuracy: 0.9289 - val_loss: 0.3051 - val_accuracy: 0.8983\n",
      "Epoch 20/100\n",
      "218/218 [==============================] - 123s 563ms/step - loss: 0.2177 - accuracy: 0.9236 - val_loss: 0.2343 - val_accuracy: 0.9220\n",
      "Epoch 21/100\n",
      "218/218 [==============================] - 122s 560ms/step - loss: 0.2114 - accuracy: 0.9276 - val_loss: 0.2981 - val_accuracy: 0.8947\n",
      "Epoch 22/100\n",
      "218/218 [==============================] - 123s 561ms/step - loss: 0.1958 - accuracy: 0.9297 - val_loss: 0.2809 - val_accuracy: 0.9113\n",
      "Epoch 23/100\n",
      "218/218 [==============================] - 128s 587ms/step - loss: 0.1762 - accuracy: 0.9369 - val_loss: 0.2824 - val_accuracy: 0.9107\n",
      "Epoch 24/100\n",
      "218/218 [==============================] - 151s 690ms/step - loss: 0.1621 - accuracy: 0.9443 - val_loss: 0.2457 - val_accuracy: 0.9207\n",
      "Epoch 25/100\n",
      "218/218 [==============================] - 134s 614ms/step - loss: 0.1560 - accuracy: 0.9437 - val_loss: 0.3253 - val_accuracy: 0.8983\n",
      "Epoch 26/100\n",
      "218/218 [==============================] - 131s 597ms/step - loss: 0.1681 - accuracy: 0.9396 - val_loss: 0.3209 - val_accuracy: 0.8940\n",
      "Epoch 27/100\n",
      "218/218 [==============================] - 123s 561ms/step - loss: 0.1719 - accuracy: 0.9393 - val_loss: 0.2664 - val_accuracy: 0.9017\n",
      "Epoch 28/100\n",
      "218/218 [==============================] - 122s 558ms/step - loss: 0.1621 - accuracy: 0.9420 - val_loss: 0.1837 - val_accuracy: 0.9373\n",
      "Epoch 29/100\n",
      "218/218 [==============================] - 121s 556ms/step - loss: 0.1340 - accuracy: 0.9503 - val_loss: 0.2926 - val_accuracy: 0.9123\n",
      "Epoch 30/100\n",
      "218/218 [==============================] - 121s 554ms/step - loss: 0.1552 - accuracy: 0.9490 - val_loss: 0.1958 - val_accuracy: 0.9413\n",
      "Epoch 31/100\n",
      "218/218 [==============================] - 123s 562ms/step - loss: 0.1492 - accuracy: 0.9467 - val_loss: 0.2757 - val_accuracy: 0.9160\n",
      "Epoch 32/100\n",
      "218/218 [==============================] - 122s 555ms/step - loss: 0.1479 - accuracy: 0.9490 - val_loss: 0.1554 - val_accuracy: 0.9473\n",
      "Epoch 33/100\n",
      "218/218 [==============================] - 123s 563ms/step - loss: 0.1100 - accuracy: 0.9583 - val_loss: 0.1968 - val_accuracy: 0.9367\n",
      "Epoch 34/100\n",
      "218/218 [==============================] - 122s 559ms/step - loss: 0.1244 - accuracy: 0.9573 - val_loss: 0.1638 - val_accuracy: 0.9463\n",
      "Epoch 35/100\n",
      "218/218 [==============================] - 123s 562ms/step - loss: 0.1394 - accuracy: 0.9519 - val_loss: 0.1929 - val_accuracy: 0.9380\n",
      "Epoch 36/100\n",
      "218/218 [==============================] - 130s 593ms/step - loss: 0.1252 - accuracy: 0.9550 - val_loss: 0.1976 - val_accuracy: 0.9330\n",
      "Epoch 37/100\n",
      "218/218 [==============================] - 122s 557ms/step - loss: 0.1010 - accuracy: 0.9651 - val_loss: 0.1917 - val_accuracy: 0.9343\n",
      "Epoch 38/100\n",
      "218/218 [==============================] - 127s 579ms/step - loss: 0.0930 - accuracy: 0.9677 - val_loss: 0.2275 - val_accuracy: 0.9263\n",
      "Epoch 39/100\n",
      "218/218 [==============================] - 122s 559ms/step - loss: 0.1378 - accuracy: 0.9549 - val_loss: 0.3118 - val_accuracy: 0.9063\n",
      "Epoch 40/100\n",
      "218/218 [==============================] - 122s 558ms/step - loss: 0.1066 - accuracy: 0.9640 - val_loss: 0.2456 - val_accuracy: 0.9170\n",
      "Epoch 41/100\n",
      "218/218 [==============================] - 125s 571ms/step - loss: 0.0923 - accuracy: 0.9687 - val_loss: 0.3414 - val_accuracy: 0.9117\n",
      "Epoch 42/100\n",
      "218/218 [==============================] - 124s 567ms/step - loss: 0.1178 - accuracy: 0.9564 - val_loss: 0.2181 - val_accuracy: 0.9297\n",
      "Epoch 43/100\n",
      "218/218 [==============================] - 125s 572ms/step - loss: 0.1154 - accuracy: 0.9590 - val_loss: 0.2438 - val_accuracy: 0.9250\n",
      "Epoch 44/100\n",
      "218/218 [==============================] - 123s 563ms/step - loss: 0.0786 - accuracy: 0.9711 - val_loss: 0.2385 - val_accuracy: 0.9333\n",
      "Epoch 45/100\n",
      "218/218 [==============================] - 122s 559ms/step - loss: 0.1027 - accuracy: 0.9646 - val_loss: 0.2101 - val_accuracy: 0.9340\n",
      "Epoch 46/100\n",
      "218/218 [==============================] - 124s 566ms/step - loss: 0.0831 - accuracy: 0.9733 - val_loss: 0.2591 - val_accuracy: 0.9187\n",
      "Epoch 47/100\n",
      "218/218 [==============================] - 123s 562ms/step - loss: 0.0721 - accuracy: 0.9746 - val_loss: 0.1988 - val_accuracy: 0.9363\n",
      "Epoch 48/100\n",
      "218/218 [==============================] - 124s 564ms/step - loss: 0.0974 - accuracy: 0.9663 - val_loss: 0.2148 - val_accuracy: 0.9340\n",
      "Epoch 49/100\n",
      "218/218 [==============================] - 124s 565ms/step - loss: 0.0904 - accuracy: 0.9677 - val_loss: 0.2212 - val_accuracy: 0.9367\n",
      "Epoch 50/100\n",
      "218/218 [==============================] - 123s 561ms/step - loss: 0.1131 - accuracy: 0.9626 - val_loss: 0.3230 - val_accuracy: 0.9000\n",
      "Epoch 51/100\n",
      "218/218 [==============================] - 125s 571ms/step - loss: 0.0697 - accuracy: 0.9781 - val_loss: 0.1546 - val_accuracy: 0.9560\n",
      "Epoch 52/100\n",
      "218/218 [==============================] - 124s 569ms/step - loss: 0.0920 - accuracy: 0.9687 - val_loss: 0.2842 - val_accuracy: 0.9190\n",
      "Epoch 53/100\n",
      "218/218 [==============================] - 124s 567ms/step - loss: 0.0972 - accuracy: 0.9663 - val_loss: 0.2838 - val_accuracy: 0.9213\n",
      "Epoch 54/100\n",
      "218/218 [==============================] - 123s 563ms/step - loss: 0.1010 - accuracy: 0.9649 - val_loss: 0.2821 - val_accuracy: 0.9153\n",
      "Epoch 55/100\n",
      "218/218 [==============================] - 124s 568ms/step - loss: 0.0837 - accuracy: 0.9697 - val_loss: 0.1924 - val_accuracy: 0.9453\n",
      "Epoch 56/100\n",
      "218/218 [==============================] - 122s 558ms/step - loss: 0.0866 - accuracy: 0.9707 - val_loss: 0.1856 - val_accuracy: 0.9490\n",
      "Epoch 57/100\n",
      "218/218 [==============================] - 126s 577ms/step - loss: 0.0855 - accuracy: 0.9710 - val_loss: 0.1736 - val_accuracy: 0.9513\n",
      "Epoch 58/100\n",
      "218/218 [==============================] - 130s 594ms/step - loss: 0.0728 - accuracy: 0.9749 - val_loss: 0.2602 - val_accuracy: 0.9220\n",
      "Epoch 59/100\n",
      "218/218 [==============================] - 126s 575ms/step - loss: 0.0870 - accuracy: 0.9703 - val_loss: 0.1693 - val_accuracy: 0.9477\n",
      "Epoch 60/100\n",
      "218/218 [==============================] - 130s 594ms/step - loss: 0.1055 - accuracy: 0.9644 - val_loss: 0.1973 - val_accuracy: 0.9473\n",
      "Epoch 61/100\n",
      "218/218 [==============================] - 132s 603ms/step - loss: 0.0662 - accuracy: 0.9784 - val_loss: 0.1432 - val_accuracy: 0.9563\n",
      "Epoch 62/100\n",
      "218/218 [==============================] - 126s 576ms/step - loss: 0.0366 - accuracy: 0.9877 - val_loss: 0.1542 - val_accuracy: 0.9557\n",
      "Epoch 63/100\n",
      "218/218 [==============================] - 124s 566ms/step - loss: 0.0973 - accuracy: 0.9706 - val_loss: 0.2296 - val_accuracy: 0.9407\n",
      "Epoch 64/100\n",
      "218/218 [==============================] - 125s 570ms/step - loss: 0.0579 - accuracy: 0.9789 - val_loss: 0.1857 - val_accuracy: 0.9497\n",
      "Epoch 65/100\n",
      "218/218 [==============================] - 131s 601ms/step - loss: 0.0579 - accuracy: 0.9790 - val_loss: 0.1946 - val_accuracy: 0.9443\n",
      "Epoch 66/100\n",
      "218/218 [==============================] - 124s 566ms/step - loss: 0.0496 - accuracy: 0.9834 - val_loss: 0.2507 - val_accuracy: 0.9360\n",
      "Epoch 67/100\n",
      "218/218 [==============================] - 124s 569ms/step - loss: 0.0739 - accuracy: 0.9776 - val_loss: 0.1874 - val_accuracy: 0.9443\n",
      "Epoch 68/100\n",
      "218/218 [==============================] - 124s 566ms/step - loss: 0.0668 - accuracy: 0.9759 - val_loss: 0.2458 - val_accuracy: 0.9337\n",
      "Epoch 69/100\n",
      "218/218 [==============================] - 121s 555ms/step - loss: 0.1004 - accuracy: 0.9656 - val_loss: 0.1677 - val_accuracy: 0.9530\n",
      "Epoch 70/100\n",
      "218/218 [==============================] - 132s 605ms/step - loss: 0.0696 - accuracy: 0.9743 - val_loss: 0.1572 - val_accuracy: 0.9507\n",
      "Epoch 71/100\n",
      "218/218 [==============================] - 133s 609ms/step - loss: 0.0629 - accuracy: 0.9796 - val_loss: 0.2018 - val_accuracy: 0.9397\n",
      "Epoch 72/100\n",
      "218/218 [==============================] - 126s 575ms/step - loss: 0.0747 - accuracy: 0.9749 - val_loss: 0.3004 - val_accuracy: 0.9187\n",
      "Epoch 73/100\n",
      "218/218 [==============================] - 126s 577ms/step - loss: 0.0848 - accuracy: 0.9729 - val_loss: 0.1549 - val_accuracy: 0.9513\n",
      "Epoch 74/100\n",
      "218/218 [==============================] - 125s 574ms/step - loss: 0.0823 - accuracy: 0.9750 - val_loss: 0.2038 - val_accuracy: 0.9417\n",
      "Epoch 75/100\n",
      "218/218 [==============================] - 124s 568ms/step - loss: 0.0538 - accuracy: 0.9809 - val_loss: 0.1869 - val_accuracy: 0.9483\n",
      "Epoch 76/100\n",
      "218/218 [==============================] - 124s 568ms/step - loss: 0.0701 - accuracy: 0.9753 - val_loss: 0.2070 - val_accuracy: 0.9360\n",
      "Epoch 77/100\n",
      "218/218 [==============================] - 124s 568ms/step - loss: 0.0521 - accuracy: 0.9810 - val_loss: 0.1562 - val_accuracy: 0.9520\n",
      "Epoch 78/100\n",
      "218/218 [==============================] - 126s 578ms/step - loss: 0.0440 - accuracy: 0.9851 - val_loss: 0.2071 - val_accuracy: 0.9443\n",
      "Epoch 79/100\n",
      "218/218 [==============================] - 125s 572ms/step - loss: 0.0627 - accuracy: 0.9797 - val_loss: 0.1575 - val_accuracy: 0.9563\n",
      "Epoch 80/100\n",
      "218/218 [==============================] - 124s 569ms/step - loss: 0.0409 - accuracy: 0.9853 - val_loss: 0.2070 - val_accuracy: 0.9420\n",
      "Epoch 81/100\n",
      "219/218 [==============================] - ETA: 0s - loss: 0.0446 - accuracy: 0.9846Restoring model weights from the end of the best epoch: 61.\n",
      "218/218 [==============================] - 124s 565ms/step - loss: 0.0446 - accuracy: 0.9846 - val_loss: 0.2167 - val_accuracy: 0.9417\n",
      "Epoch 81: early stopping\n"
     ]
    }
   ],
   "source": [
    "history = cnn.fit(x = train_gen,\n",
    "                    callbacks = [es], \n",
    "                    steps_per_epoch = 7000/32,\n",
    "                    epochs = 100,\n",
    "                    validation_steps = 3000/32,\n",
    "                    validation_data = val_gen)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a44385b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T07:46:03.953619Z",
     "iopub.status.busy": "2023-08-28T07:46:03.953257Z",
     "iopub.status.idle": "2023-08-28T07:46:21.361393Z",
     "shell.execute_reply": "2023-08-28T07:46:21.360443Z"
    },
    "papermill": {
     "duration": 18.843466,
     "end_time": "2023-08-28T07:46:21.363656",
     "exception": false,
     "start_time": "2023-08-28T07:46:02.520190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32/32 [==============================] - 17s 528ms/step - loss: 0.1940 - accuracy: 0.9410\n"
     ]
    }
   ],
   "source": [
    "scores = cnn.evaluate(test_gen)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fe9c7f0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T07:46:24.320102Z",
     "iopub.status.busy": "2023-08-28T07:46:24.318979Z",
     "iopub.status.idle": "2023-08-28T07:46:24.924652Z",
     "shell.execute_reply": "2023-08-28T07:46:24.923688Z"
    },
    "papermill": {
     "duration": 2.104366,
     "end_time": "2023-08-28T07:46:24.926732",
     "exception": false,
     "start_time": "2023-08-28T07:46:22.822366",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the loss\n",
    "plt.plot(history.history['loss'], label='Training loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation loss')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# plot the accuracy\n",
    "plt.plot(history.history['accuracy'], label='Training accuracy')\n",
    "plt.plot(history.history['val_accuracy'], label='Validation accuracy')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "04cac0c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T07:46:27.972488Z",
     "iopub.status.busy": "2023-08-28T07:46:27.972074Z",
     "iopub.status.idle": "2023-08-28T07:46:28.027032Z",
     "shell.execute_reply": "2023-08-28T07:46:28.026070Z"
    },
    "papermill": {
     "duration": 1.596049,
     "end_time": "2023-08-28T07:46:28.029062",
     "exception": false,
     "start_time": "2023-08-28T07:46:26.433013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# don't forget to save your model for later\n",
    "cnn.save('cnn.h5')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48be5fe2",
   "metadata": {
    "papermill": {
     "duration": 1.468423,
     "end_time": "2023-08-28T07:46:31.024191",
     "exception": false,
     "start_time": "2023-08-28T07:46:29.555768",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Making predictions, confusion matrix, metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5529aaee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T07:46:34.565843Z",
     "iopub.status.busy": "2023-08-28T07:46:34.565362Z",
     "iopub.status.idle": "2023-08-28T07:46:34.570908Z",
     "shell.execute_reply": "2023-08-28T07:46:34.569947Z"
    },
    "papermill": {
     "duration": 1.688577,
     "end_time": "2023-08-28T07:46:34.573192",
     "exception": false,
     "start_time": "2023-08-28T07:46:32.884615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_steps_per_epoch = np.math.ceil(test_gen.samples / test_gen.batch_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "44516064",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T07:46:37.609736Z",
     "iopub.status.busy": "2023-08-28T07:46:37.609358Z",
     "iopub.status.idle": "2023-08-28T07:46:49.839806Z",
     "shell.execute_reply": "2023-08-28T07:46:49.838801Z"
    },
    "papermill": {
     "duration": 13.773489,
     "end_time": "2023-08-28T07:46:49.842108",
     "exception": false,
     "start_time": "2023-08-28T07:46:36.068619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32/32 [==============================] - 12s 362ms/step\n"
     ]
    }
   ],
   "source": [
    "# Predict classes\n",
    "predictions = cnn.predict(test_gen, steps=test_steps_per_epoch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e8af8d16",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T07:46:52.809400Z",
     "iopub.status.busy": "2023-08-28T07:46:52.809016Z",
     "iopub.status.idle": "2023-08-28T07:46:52.817024Z",
     "shell.execute_reply": "2023-08-28T07:46:52.815822Z"
    },
    "papermill": {
     "duration": 1.451435,
     "end_time": "2023-08-28T07:46:52.821094",
     "exception": false,
     "start_time": "2023-08-28T07:46:51.369659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([9.6828550e-01, 2.1195496e-03, 8.0263646e-07, 6.3441419e-03,\n",
       "       5.1844474e-03, 1.4685359e-04, 1.7290890e-03, 1.6188828e-02,\n",
       "       1.3941127e-08, 8.2148392e-07], dtype=float32)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f80977ce",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T07:46:55.949713Z",
     "iopub.status.busy": "2023-08-28T07:46:55.949332Z",
     "iopub.status.idle": "2023-08-28T07:46:55.954435Z",
     "shell.execute_reply": "2023-08-28T07:46:55.953370Z"
    },
    "papermill": {
     "duration": 1.604627,
     "end_time": "2023-08-28T07:46:55.956488",
     "exception": false,
     "start_time": "2023-08-28T07:46:54.351861",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "predicted_classes = np.argmax(predictions,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "96544787",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T07:46:58.982606Z",
     "iopub.status.busy": "2023-08-28T07:46:58.982242Z",
     "iopub.status.idle": "2023-08-28T07:46:58.987178Z",
     "shell.execute_reply": "2023-08-28T07:46:58.986082Z"
    },
    "papermill": {
     "duration": 1.533289,
     "end_time": "2023-08-28T07:46:58.989176",
     "exception": false,
     "start_time": "2023-08-28T07:46:57.455887",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Get ground-truth classes and class-labels\n",
    "true_classes = test_gen.classes\n",
    "class_labels = list(test_gen.class_indices.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a55fba86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T07:47:02.012653Z",
     "iopub.status.busy": "2023-08-28T07:47:02.012289Z",
     "iopub.status.idle": "2023-08-28T07:47:02.025113Z",
     "shell.execute_reply": "2023-08-28T07:47:02.023904Z"
    },
    "papermill": {
     "duration": 1.465091,
     "end_time": "2023-08-28T07:47:02.027541",
     "exception": false,
     "start_time": "2023-08-28T07:47:00.562450",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[95  2  0  0  1  0  1  1  0  0]\n",
      " [ 2 88  4  0  2  0  4  0  0  0]\n",
      " [ 0  3 96  1  0  0  0  0  0  0]\n",
      " [ 0  1  1 93  3  0  0  1  0  1]\n",
      " [ 0  0  5  0 92  0  2  0  1  0]\n",
      " [ 0  0  0  1  0 91  5  1  2  0]\n",
      " [ 1  1  0  0  1  1 95  1  0  0]\n",
      " [ 1  1  0  0  0  1  0 97  0  0]\n",
      " [ 0  1  0  0  1  0  0  0 98  0]\n",
      " [ 0  0  1  0  2  0  1  0  0 96]]\n"
     ]
    }
   ],
   "source": [
    "# Print confusion matrix\n",
    "confusion_matrix = confusion_matrix(test_gen.classes, predicted_classes)\n",
    "print(confusion_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "17229e48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-08-28T07:47:05.628930Z",
     "iopub.status.busy": "2023-08-28T07:47:05.628541Z",
     "iopub.status.idle": "2023-08-28T07:47:05.643239Z",
     "shell.execute_reply": "2023-08-28T07:47:05.642231Z"
    },
    "papermill": {
     "duration": 2.000006,
     "end_time": "2023-08-28T07:47:05.645841",
     "exception": false,
     "start_time": "2023-08-28T07:47:03.645835",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                               precision    recall  f1-score   support\n",
      "\n",
      "                      Tomato___Bacterial_spot       0.96      0.95      0.95       100\n",
      "                        Tomato___Early_blight       0.91      0.88      0.89       100\n",
      "                         Tomato___Late_blight       0.90      0.96      0.93       100\n",
      "                           Tomato___Leaf_Mold       0.98      0.93      0.95       100\n",
      "                  Tomato___Septoria_leaf_spot       0.90      0.92      0.91       100\n",
      "Tomato___Spider_mites Two-spotted_spider_mite       0.98      0.91      0.94       100\n",
      "                         Tomato___Target_Spot       0.88      0.95      0.91       100\n",
      "       Tomato___Tomato_Yellow_Leaf_Curl_Virus       0.96      0.97      0.97       100\n",
      "                 Tomato___Tomato_mosaic_virus       0.97      0.98      0.98       100\n",
      "                             Tomato___healthy       0.99      0.96      0.97       100\n",
      "\n",
      "                                     accuracy                           0.94      1000\n",
      "                                    macro avg       0.94      0.94      0.94      1000\n",
      "                                 weighted avg       0.94      0.94      0.94      1000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# To check F1 score, recall etc.\n",
    "report = classification_report(true_classes, predicted_classes, target_names=class_labels)\n",
    "print(report)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c65821c",
   "metadata": {
    "papermill": {
     "duration": 1.521529,
     "end_time": "2023-08-28T07:47:08.621506",
     "exception": false,
     "start_time": "2023-08-28T07:47:07.099977",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f938c313",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e76f5d2b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11094.317852,
   "end_time": "2023-08-28T07:47:13.366539",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2023-08-28T04:42:19.048687",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
